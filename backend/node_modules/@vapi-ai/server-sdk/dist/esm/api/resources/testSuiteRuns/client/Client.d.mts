/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments.mjs";
import * as core from "../../../../core/index.mjs";
import * as Vapi from "../../../index.mjs";
export declare namespace TestSuiteRuns {
    interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class TestSuiteRuns {
    protected readonly _options: TestSuiteRuns.Options;
    constructor(_options: TestSuiteRuns.Options);
    /**
     * @param {string} testSuiteId
     * @param {Vapi.TestSuiteRunControllerFindAllPaginatedRequest} request
     * @param {TestSuiteRuns.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteRuns.testSuiteRunControllerFindAllPaginated("testSuiteId")
     */
    testSuiteRunControllerFindAllPaginated(testSuiteId: string, request?: Vapi.TestSuiteRunControllerFindAllPaginatedRequest, requestOptions?: TestSuiteRuns.RequestOptions): core.HttpResponsePromise<Vapi.TestSuiteRunsPaginatedResponse>;
    private __testSuiteRunControllerFindAllPaginated;
    /**
     * @param {string} testSuiteId
     * @param {Vapi.CreateTestSuiteRunDto} request
     * @param {TestSuiteRuns.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteRuns.testSuiteRunControllerCreate("testSuiteId")
     */
    testSuiteRunControllerCreate(testSuiteId: string, request?: Vapi.CreateTestSuiteRunDto, requestOptions?: TestSuiteRuns.RequestOptions): core.HttpResponsePromise<Vapi.TestSuiteRun>;
    private __testSuiteRunControllerCreate;
    /**
     * @param {string} testSuiteId
     * @param {string} id
     * @param {TestSuiteRuns.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteRuns.testSuiteRunControllerFindOne("testSuiteId", "id")
     */
    testSuiteRunControllerFindOne(testSuiteId: string, id: string, requestOptions?: TestSuiteRuns.RequestOptions): core.HttpResponsePromise<Vapi.TestSuiteRun>;
    private __testSuiteRunControllerFindOne;
    /**
     * @param {string} testSuiteId
     * @param {string} id
     * @param {TestSuiteRuns.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteRuns.testSuiteRunControllerRemove("testSuiteId", "id")
     */
    testSuiteRunControllerRemove(testSuiteId: string, id: string, requestOptions?: TestSuiteRuns.RequestOptions): core.HttpResponsePromise<Vapi.TestSuiteRun>;
    private __testSuiteRunControllerRemove;
    /**
     * @param {string} testSuiteId
     * @param {string} id
     * @param {Vapi.UpdateTestSuiteRunDto} request
     * @param {TestSuiteRuns.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteRuns.testSuiteRunControllerUpdate("testSuiteId", "id")
     */
    testSuiteRunControllerUpdate(testSuiteId: string, id: string, request?: Vapi.UpdateTestSuiteRunDto, requestOptions?: TestSuiteRuns.RequestOptions): core.HttpResponsePromise<Vapi.TestSuiteRun>;
    private __testSuiteRunControllerUpdate;
    protected _getAuthorizationHeader(): Promise<string>;
}
