/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments.mjs";
import * as core from "../../../../core/index.mjs";
import * as Vapi from "../../../index.mjs";
export declare namespace Campaigns {
    interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Campaigns {
    protected readonly _options: Campaigns.Options;
    constructor(_options: Campaigns.Options);
    /**
     * @param {Vapi.CampaignControllerFindAllRequest} request
     * @param {Campaigns.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.campaigns.campaignControllerFindAll()
     */
    campaignControllerFindAll(request?: Vapi.CampaignControllerFindAllRequest, requestOptions?: Campaigns.RequestOptions): core.HttpResponsePromise<Vapi.CampaignPaginatedResponse>;
    private __campaignControllerFindAll;
    /**
     * @param {Vapi.CreateCampaignDto} request
     * @param {Campaigns.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.campaigns.campaignControllerCreate({
     *         name: "Q2 Sales Campaign",
     *         phoneNumberId: "phoneNumberId",
     *         customers: [{}]
     *     })
     */
    campaignControllerCreate(request: Vapi.CreateCampaignDto, requestOptions?: Campaigns.RequestOptions): core.HttpResponsePromise<Vapi.Campaign>;
    private __campaignControllerCreate;
    /**
     * @param {string} id
     * @param {Campaigns.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.campaigns.campaignControllerFindOne("id")
     */
    campaignControllerFindOne(id: string, requestOptions?: Campaigns.RequestOptions): core.HttpResponsePromise<Vapi.Campaign>;
    private __campaignControllerFindOne;
    /**
     * @param {string} id
     * @param {Campaigns.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.campaigns.campaignControllerRemove("id")
     */
    campaignControllerRemove(id: string, requestOptions?: Campaigns.RequestOptions): core.HttpResponsePromise<Vapi.Campaign>;
    private __campaignControllerRemove;
    /**
     * @param {string} id
     * @param {Vapi.UpdateCampaignDto} request
     * @param {Campaigns.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.campaigns.campaignControllerUpdate("id")
     */
    campaignControllerUpdate(id: string, request?: Vapi.UpdateCampaignDto, requestOptions?: Campaigns.RequestOptions): core.HttpResponsePromise<Vapi.Campaign>;
    private __campaignControllerUpdate;
    protected _getAuthorizationHeader(): Promise<string>;
}
