/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Vapi from "../index.mjs";
export interface McpTool {
    /**
     * These are the messages that will be spoken to the user as the tool is running.
     *
     * For some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.
     */
    messages?: McpTool.Messages.Item[];
    type: "mcp";
    /**
     *   This is the server where a `tool-calls` webhook will be sent.
     *
     *   Notes:
     *   - Webhook is sent to this server when a tool call is made.
     *   - Webhook contains the call, assistant, and phone number objects.
     *   - Webhook contains the variables set on the assistant.
     *   - Webhook is sent to the first available URL in this order: {{tool.server.url}}, {{assistant.server.url}}, {{phoneNumber.server.url}}, {{org.server.url}}.
     *   - Webhook expects a response with tool call result.
     */
    server?: Vapi.Server;
    /** This is the unique identifier for the tool. */
    id: string;
    /** This is the unique identifier for the organization that this tool belongs to. */
    orgId: string;
    /** This is the ISO 8601 date-time string of when the tool was created. */
    createdAt: string;
    /** This is the ISO 8601 date-time string of when the tool was last updated. */
    updatedAt: string;
    /**
     * This is the function definition of the tool.
     *
     * For `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.
     *
     * An example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument "reason". Then, in `messages` array, you can have many "request-complete" messages. One of these messages will be triggered if the `messages[].conditions` matches the "reason" argument.
     */
    function?: Vapi.OpenAiFunction;
    metadata?: Vapi.McpToolMetadata;
}
export declare namespace McpTool {
    type Messages = Messages.Item[];
    namespace Messages {
        type Item = Vapi.ToolMessageStart | Vapi.ToolMessageComplete | Vapi.ToolMessageFailed | Vapi.ToolMessageDelayed;
    }
}
