/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Vapi from "../index.mjs";
export interface Template {
    details?: Template.Details;
    providerDetails?: Template.ProviderDetails;
    metadata?: Vapi.ToolTemplateMetadata;
    visibility?: Template.Visibility;
    type: "tool";
    /** The name of the template. This is just for your own reference. */
    name?: string;
    provider?: Template.Provider;
    /** The unique identifier for the template. */
    id: string;
    /** The unique identifier for the organization that this template belongs to. */
    orgId: string;
    /** The ISO 8601 date-time string of when the template was created. */
    createdAt: string;
    /** The ISO 8601 date-time string of when the template was last updated. */
    updatedAt: string;
}
export declare namespace Template {
    type Details = Vapi.CreateApiRequestToolDto | Vapi.CreateBashToolDto | Vapi.CreateComputerToolDto | Vapi.CreateDtmfToolDto | Vapi.CreateEndCallToolDto | Vapi.CreateFunctionToolDto | Vapi.CreateGoHighLevelCalendarAvailabilityToolDto | Vapi.CreateGoHighLevelCalendarEventCreateToolDto | Vapi.CreateGoHighLevelContactCreateToolDto | Vapi.CreateGoHighLevelContactGetToolDto | Vapi.CreateGoogleCalendarCheckAvailabilityToolDto | Vapi.CreateGoogleCalendarCreateEventToolDto | Vapi.CreateGoogleSheetsRowAppendToolDto | Vapi.CreateMcpToolDto | Vapi.CreateQueryToolDto | Vapi.CreateSlackSendMessageToolDto | Vapi.CreateSmsToolDto | Vapi.CreateTextEditorToolDto | Vapi.CreateTransferCallToolDto;
    type ProviderDetails = Vapi.MakeToolProviderDetails | Vapi.GhlToolProviderDetails | Vapi.FunctionToolProviderDetails | Vapi.GoogleCalendarCreateEventToolProviderDetails | Vapi.GoogleSheetsRowAppendToolProviderDetails | Vapi.GoHighLevelCalendarAvailabilityToolProviderDetails | Vapi.GoHighLevelCalendarEventCreateToolProviderDetails | Vapi.GoHighLevelContactCreateToolProviderDetails | Vapi.GoHighLevelContactGetToolProviderDetails;
    type Visibility = "public" | "private";
    const Visibility: {
        readonly Public: "public";
        readonly Private: "private";
    };
    type Provider = "make" | "gohighlevel" | "function";
    const Provider: {
        readonly Make: "make";
        readonly Gohighlevel: "gohighlevel";
        readonly Function: "function";
    };
}
