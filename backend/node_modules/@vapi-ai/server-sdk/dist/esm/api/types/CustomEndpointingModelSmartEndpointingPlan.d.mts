/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Vapi from "../index.mjs";
export interface CustomEndpointingModelSmartEndpointingPlan {
    /** This is the provider for the smart endpointing plan. Use `custom-endpointing-model` for custom endpointing providers that are not natively supported. */
    provider: CustomEndpointingModelSmartEndpointingPlan.Provider;
    /**
     * This is where the endpointing request will be sent. If not provided, will be sent to `assistant.server`. If that does not exist either, will be sent to `org.server`.
     *
     * Request Example:
     *
     * POST https://{server.url}
     * Content-Type: application/json
     *
     * {
     *   "message": {
     *     "type": "call.endpointing.request",
     *     "messages": [
     *       {
     *         "role": "user",
     *         "message": "Hello, how are you?",
     *         "time": 1234567890,
     *         "secondsFromStart": 0
     *       }
     *     ],
     *     ...other metadata about the call...
     *   }
     * }
     *
     * Response Expected:
     * {
     *   "timeoutSeconds": 0.5
     * }
     *
     * The timeout is the number of seconds to wait before considering the user's speech as finished. The endpointing timeout is automatically reset each time a new transcript is received (and another `call.endpointing.request` is sent).
     */
    server?: Vapi.Server;
}
export declare namespace CustomEndpointingModelSmartEndpointingPlan {
    /**
     * This is the provider for the smart endpointing plan. Use `custom-endpointing-model` for custom endpointing providers that are not natively supported.
     */
    type Provider = "vapi" | "livekit" | "custom-endpointing-model";
    const Provider: {
        readonly Vapi: "vapi";
        readonly Livekit: "livekit";
        readonly CustomEndpointingModel: "custom-endpointing-model";
    };
}
