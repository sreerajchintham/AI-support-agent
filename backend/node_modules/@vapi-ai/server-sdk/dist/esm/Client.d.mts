/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments.mjs";
import * as core from "./core/index.mjs";
import { Calls } from "./api/resources/calls/client/Client.mjs";
import { Chats } from "./api/resources/chats/client/Client.mjs";
import { Campaigns } from "./api/resources/campaigns/client/Client.mjs";
import { Sessions } from "./api/resources/sessions/client/Client.mjs";
import { Assistants } from "./api/resources/assistants/client/Client.mjs";
import { PhoneNumbers } from "./api/resources/phoneNumbers/client/Client.mjs";
import { Tools } from "./api/resources/tools/client/Client.mjs";
import { Files } from "./api/resources/files/client/Client.mjs";
import { KnowledgeBases } from "./api/resources/knowledgeBases/client/Client.mjs";
import { Workflow } from "./api/resources/workflow/client/Client.mjs";
import { Squads } from "./api/resources/squads/client/Client.mjs";
import { TestSuites } from "./api/resources/testSuites/client/Client.mjs";
import { TestSuiteTests } from "./api/resources/testSuiteTests/client/Client.mjs";
import { TestSuiteRuns } from "./api/resources/testSuiteRuns/client/Client.mjs";
import { Analytics } from "./api/resources/analytics/client/Client.mjs";
import { Logs } from "./api/resources/logs/client/Client.mjs";
export declare namespace VapiClient {
    interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class VapiClient {
    protected readonly _options: VapiClient.Options;
    protected _calls: Calls | undefined;
    protected _chats: Chats | undefined;
    protected _campaigns: Campaigns | undefined;
    protected _sessions: Sessions | undefined;
    protected _assistants: Assistants | undefined;
    protected _phoneNumbers: PhoneNumbers | undefined;
    protected _tools: Tools | undefined;
    protected _files: Files | undefined;
    protected _knowledgeBases: KnowledgeBases | undefined;
    protected _workflow: Workflow | undefined;
    protected _squads: Squads | undefined;
    protected _testSuites: TestSuites | undefined;
    protected _testSuiteTests: TestSuiteTests | undefined;
    protected _testSuiteRuns: TestSuiteRuns | undefined;
    protected _analytics: Analytics | undefined;
    protected _logs: Logs | undefined;
    constructor(_options: VapiClient.Options);
    get calls(): Calls;
    get chats(): Chats;
    get campaigns(): Campaigns;
    get sessions(): Sessions;
    get assistants(): Assistants;
    get phoneNumbers(): PhoneNumbers;
    get tools(): Tools;
    get files(): Files;
    get knowledgeBases(): KnowledgeBases;
    get workflow(): Workflow;
    get squads(): Squads;
    get testSuites(): TestSuites;
    get testSuiteTests(): TestSuiteTests;
    get testSuiteRuns(): TestSuiteRuns;
    get analytics(): Analytics;
    get logs(): Logs;
}
