/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Vapi from "../index.js";
export interface FallbackPlayHtVoice {
    /** This is the flag to toggle voice caching for the assistant. */
    cachingEnabled?: boolean;
    /** This is the voice provider that will be used. */
    provider: "playht";
    /** This is the provider-specific ID that will be used. */
    voiceId: FallbackPlayHtVoice.VoiceId;
    /** This is the speed multiplier that will be used. */
    speed?: number;
    /** A floating point number between 0, exclusive, and 2, inclusive. If equal to null or not provided, the model's default temperature will be used. The temperature parameter controls variance. Lower temperatures result in more predictable results, higher temperatures allow each run to vary more, so the voice may sound less like the baseline voice. */
    temperature?: number;
    /** An emotion to be applied to the speech. */
    emotion?: FallbackPlayHtVoice.Emotion;
    /** A number between 1 and 6. Use lower numbers to reduce how unique your chosen voice will be compared to other voices. */
    voiceGuidance?: number;
    /** A number between 1 and 30. Use lower numbers to to reduce how strong your chosen emotion will be. Higher numbers will create a very emotional performance. */
    styleGuidance?: number;
    /** A number between 1 and 2. This number influences how closely the generated speech adheres to the input text. Use lower values to create more fluid speech, but with a higher chance of deviating from the input text. Higher numbers will make the generated speech more accurate to the input text, ensuring that the words spoken align closely with the provided text. */
    textGuidance?: number;
    /** Playht voice model/engine to use. */
    model?: FallbackPlayHtVoice.Model;
    /** The language to use for the speech. */
    language?: FallbackPlayHtVoice.Language;
    /** This is the plan for chunking the model output before it is sent to the voice provider. */
    chunkPlan?: Vapi.ChunkPlan;
}
export declare namespace FallbackPlayHtVoice {
    /**
     * This is the provider-specific ID that will be used.
     */
    type VoiceId = ("jennifer" | "melissa" | "will" | "chris" | "matt" | "jack" | "ruby" | "davis" | "donna" | "michael") | string;
    /**
     * An emotion to be applied to the speech.
     */
    type Emotion = "female_happy" | "female_sad" | "female_angry" | "female_fearful" | "female_disgust" | "female_surprised" | "male_happy" | "male_sad" | "male_angry" | "male_fearful" | "male_disgust" | "male_surprised";
    const Emotion: {
        readonly FemaleHappy: "female_happy";
        readonly FemaleSad: "female_sad";
        readonly FemaleAngry: "female_angry";
        readonly FemaleFearful: "female_fearful";
        readonly FemaleDisgust: "female_disgust";
        readonly FemaleSurprised: "female_surprised";
        readonly MaleHappy: "male_happy";
        readonly MaleSad: "male_sad";
        readonly MaleAngry: "male_angry";
        readonly MaleFearful: "male_fearful";
        readonly MaleDisgust: "male_disgust";
        readonly MaleSurprised: "male_surprised";
    };
    /**
     * Playht voice model/engine to use.
     */
    type Model = "PlayHT2.0" | "PlayHT2.0-turbo" | "Play3.0-mini" | "PlayDialog";
    const Model: {
        readonly PlayHt20: "PlayHT2.0";
        readonly PlayHt20Turbo: "PlayHT2.0-turbo";
        readonly Play30Mini: "Play3.0-mini";
        readonly PlayDialog: "PlayDialog";
    };
    /**
     * The language to use for the speech.
     */
    type Language = "afrikaans" | "albanian" | "amharic" | "arabic" | "bengali" | "bulgarian" | "catalan" | "croatian" | "czech" | "danish" | "dutch" | "english" | "french" | "galician" | "german" | "greek" | "hebrew" | "hindi" | "hungarian" | "indonesian" | "italian" | "japanese" | "korean" | "malay" | "mandarin" | "polish" | "portuguese" | "russian" | "serbian" | "spanish" | "swedish" | "tagalog" | "thai" | "turkish" | "ukrainian" | "urdu" | "xhosa";
    const Language: {
        readonly Afrikaans: "afrikaans";
        readonly Albanian: "albanian";
        readonly Amharic: "amharic";
        readonly Arabic: "arabic";
        readonly Bengali: "bengali";
        readonly Bulgarian: "bulgarian";
        readonly Catalan: "catalan";
        readonly Croatian: "croatian";
        readonly Czech: "czech";
        readonly Danish: "danish";
        readonly Dutch: "dutch";
        readonly English: "english";
        readonly French: "french";
        readonly Galician: "galician";
        readonly German: "german";
        readonly Greek: "greek";
        readonly Hebrew: "hebrew";
        readonly Hindi: "hindi";
        readonly Hungarian: "hungarian";
        readonly Indonesian: "indonesian";
        readonly Italian: "italian";
        readonly Japanese: "japanese";
        readonly Korean: "korean";
        readonly Malay: "malay";
        readonly Mandarin: "mandarin";
        readonly Polish: "polish";
        readonly Portuguese: "portuguese";
        readonly Russian: "russian";
        readonly Serbian: "serbian";
        readonly Spanish: "spanish";
        readonly Swedish: "swedish";
        readonly Tagalog: "tagalog";
        readonly Thai: "thai";
        readonly Turkish: "turkish";
        readonly Ukrainian: "ukrainian";
        readonly Urdu: "urdu";
        readonly Xhosa: "xhosa";
    };
}
