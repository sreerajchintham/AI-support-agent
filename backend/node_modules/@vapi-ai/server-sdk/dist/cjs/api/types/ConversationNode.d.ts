/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Vapi from "../index.js";
export interface ConversationNode {
    /**
     * This is the Conversation node. This can be used to start a conversation with the customer.
     *
     * The flow is:
     * - Workflow starts the conversation node
     * - Model is active with the `prompt` and global context.
     * - Model will call a tool to exit this node.
     * - Workflow will extract variables from the conversation.
     * - Workflow continues.
     */
    type: "conversation";
    /**
     * This is the model for the node.
     *
     * This overrides `workflow.model`.
     */
    model?: ConversationNode.Model;
    /**
     * This is the transcriber for the node.
     *
     * This overrides `workflow.transcriber`.
     */
    transcriber?: ConversationNode.Transcriber;
    /**
     * This is the voice for the node.
     *
     * This overrides `workflow.voice`.
     */
    voice?: ConversationNode.Voice;
    prompt?: string;
    /** This is the plan for the global node. */
    globalNodePlan?: Vapi.GlobalNodePlan;
    /**
     * This is the plan that controls the variable extraction from the user's responses.
     *
     * Usage:
     * Use `schema` to specify what you want to extract from the user's responses.
     * ```json
     * {
     *   "schema": {
     *     "type": "object",
     *     "properties": {
     *       "user": {
     *         "type": "object",
     *         "properties": {
     *           "name": {
     *             "type": "string"
     *           },
     *           "age": {
     *             "type": "number"
     *           }
     *         }
     *       }
     *     }
     *   }
     * }
     * ```
     *
     * This will be extracted as `{{ user.name }}` and `{{ user.age }}` respectively.
     *
     * (Optional) Use `aliases` to create new variables.
     *
     * ```json
     * {
     *   "aliases": [
     *     {
     *       "key": "userAge",
     *       "value": "{{user.age}}"
     *     },
     *     {
     *       "key": "userName",
     *       "value": "{{user.name}}"
     *     }
     *   ]
     * }
     * ```
     *
     * This will be extracted as `{{ userAge }}` and `{{ userName }}` respectively.
     *
     * Note: The `schema` field is required for Conversation nodes if you want to extract variables from the user's responses. `aliases` is just a convenience.
     */
    variableExtractionPlan?: Vapi.VariableExtractionPlan;
    name: string;
    /** This is whether or not the node is the start of the workflow. */
    isStart?: boolean;
    /** This is for metadata you want to store on the task. */
    metadata?: Record<string, unknown>;
}
export declare namespace ConversationNode {
    /**
     * This is the model for the node.
     *
     * This overrides `workflow.model`.
     */
    type Model = Vapi.WorkflowOpenAiModel | Vapi.WorkflowAnthropicModel | Vapi.WorkflowGoogleModel | Vapi.WorkflowCustomModel;
    /**
     * This is the transcriber for the node.
     *
     * This overrides `workflow.transcriber`.
     */
    type Transcriber = Vapi.AssemblyAiTranscriber | Vapi.AzureSpeechTranscriber | Vapi.CustomTranscriber | Vapi.DeepgramTranscriber | Vapi.ElevenLabsTranscriber | Vapi.GladiaTranscriber | Vapi.GoogleTranscriber | Vapi.SpeechmaticsTranscriber | Vapi.TalkscriberTranscriber | Vapi.OpenAiTranscriber | Vapi.CartesiaTranscriber;
    /**
     * This is the voice for the node.
     *
     * This overrides `workflow.voice`.
     */
    type Voice = Vapi.AzureVoice | Vapi.CartesiaVoice | Vapi.CustomVoice | Vapi.DeepgramVoice | Vapi.ElevenLabsVoice | Vapi.HumeVoice | Vapi.LmntVoice | Vapi.NeuphonicVoice | Vapi.OpenAiVoice | Vapi.PlayHtVoice | Vapi.RimeAiVoice | Vapi.SmallestAiVoice | Vapi.TavusVoice | Vapi.VapiVoice | Vapi.SesameVoice | Vapi.InworldVoice;
}
