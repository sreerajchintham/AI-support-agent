/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface JsonSchema {
    /**
     * This is the type of output you'd like.
     *
     * `string`, `number`, `integer`, `boolean` are the primitive types and should be obvious.
     *
     * `array` and `object` are more interesting and quite powerful. They allow you to define nested structures.
     *
     * For `array`, you can define the schema of the items in the array using the `items` property.
     *
     * For `object`, you can define the properties of the object using the `properties` property.
     */
    type: JsonSchema.Type;
    /**
     * This is required if the type is "array". This is the schema of the items in the array.
     *
     * This is of type JsonSchema. However, Swagger doesn't support circular references.
     */
    items?: Record<string, unknown>;
    /**
     * This is required if the type is "object". This specifies the properties of the object.
     *
     * This is a map of string to JsonSchema. However, Swagger doesn't support circular references.
     */
    properties?: Record<string, unknown>;
    /** This is the description to help the model understand what it needs to output. */
    description?: string;
    /**
     * This is the pattern of the string. This is a regex that will be used to validate the data in question. To use a common format, use the `format` property instead.
     *
     * OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs#supported-properties
     */
    pattern?: string;
    /**
     * This is the format of the string. To pass a regex, use the `pattern` property instead.
     *
     * OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs?api-mode=chat&type-restrictions=string-restrictions
     */
    format?: JsonSchema.Format;
    /**
     * This is a list of properties that are required.
     *
     * This only makes sense if the type is "object".
     */
    required?: string[];
    /** This array specifies the allowed values that can be used to restrict the output of the model. */
    enum?: string[];
    /** This is the title of the schema. */
    title?: string;
}
export declare namespace JsonSchema {
    /**
     * This is the type of output you'd like.
     *
     * `string`, `number`, `integer`, `boolean` are the primitive types and should be obvious.
     *
     * `array` and `object` are more interesting and quite powerful. They allow you to define nested structures.
     *
     * For `array`, you can define the schema of the items in the array using the `items` property.
     *
     * For `object`, you can define the properties of the object using the `properties` property.
     */
    type Type = "string" | "number" | "integer" | "boolean" | "array" | "object";
    const Type: {
        readonly String: "string";
        readonly Number: "number";
        readonly Integer: "integer";
        readonly Boolean: "boolean";
        readonly Array: "array";
        readonly Object: "object";
    };
    /**
     * This is the format of the string. To pass a regex, use the `pattern` property instead.
     *
     * OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs?api-mode=chat&type-restrictions=string-restrictions
     */
    type Format = "date-time" | "time" | "date" | "duration" | "email" | "hostname" | "ipv4" | "ipv6" | "uuid";
    const Format: {
        readonly DateTime: "date-time";
        readonly Time: "time";
        readonly Date: "date";
        readonly Duration: "duration";
        readonly Email: "email";
        readonly Hostname: "hostname";
        readonly Ipv4: "ipv4";
        readonly Ipv6: "ipv6";
        readonly Uuid: "uuid";
    };
}
