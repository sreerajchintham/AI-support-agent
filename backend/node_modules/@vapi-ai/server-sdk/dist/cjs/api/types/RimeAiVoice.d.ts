/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Vapi from "../index.js";
export interface RimeAiVoice {
    /** This is the flag to toggle voice caching for the assistant. */
    cachingEnabled?: boolean;
    /** This is the voice provider that will be used. */
    provider: "rime-ai";
    /** This is the provider-specific ID that will be used. */
    voiceId: RimeAiVoice.VoiceId;
    /** This is the model that will be used. Defaults to 'mistv2' when not specified. */
    model?: RimeAiVoice.Model;
    /** This is the speed multiplier that will be used. */
    speed?: number;
    /** This is a flag that controls whether to add slight pauses using angle brackets. Example: "Hi. <200> I'd love to have a conversation with you." adds a 200ms pause between the first and second sentences. */
    pauseBetweenBrackets?: boolean;
    /** This is a flag that controls whether text inside brackets should be phonemized (converted to phonetic pronunciation) - Example: "{h'El.o} World" will pronounce "Hello" as expected. */
    phonemizeBetweenBrackets?: boolean;
    /** This is a flag that controls whether to optimize for reduced latency in streaming. https://docs.rime.ai/api-reference/endpoint/websockets#param-reduce-latency */
    reduceLatency?: boolean;
    /** This is a string that allows inline speed control using alpha notation. https://docs.rime.ai/api-reference/endpoint/websockets#param-inline-speed-alpha */
    inlineSpeedAlpha?: string;
    /** This is the plan for chunking the model output before it is sent to the voice provider. */
    chunkPlan?: Vapi.ChunkPlan;
    /** This is the plan for voice provider fallbacks in the event that the primary voice provider fails. */
    fallbackPlan?: Vapi.FallbackPlan;
}
export declare namespace RimeAiVoice {
    /**
     * This is the provider-specific ID that will be used.
     */
    type VoiceId = ("abbie" | "allison" | "ally" | "alona" | "amber" | "ana" | "antoine" | "armon" | "brenda" | "brittany" | "carol" | "colin" | "courtney" | "elena" | "elliot" | "eva" | "geoff" | "gerald" | "hank" | "helen" | "hera" | "jen" | "joe" | "joy" | "juan" | "kendra" | "kendrick" | "kenneth" | "kevin" | "kris" | "linda" | "madison" | "marge" | "marina" | "marissa" | "marta" | "maya" | "nicholas" | "nyles" | "phil" | "reba" | "rex" | "rick" | "ritu" | "rob" | "rodney" | "rohan" | "rosco" | "samantha" | "sandy" | "selena" | "seth" | "sharon" | "stan" | "tamra" | "tanya" | "tibur" | "tj" | "tyler" | "viv" | "yadira" | "marsh" | "bayou" | "creek" | "brook" | "flower" | "spore" | "glacier" | "gulch" | "alpine" | "cove" | "lagoon" | "tundra" | "steppe" | "mesa" | "grove" | "rainforest" | "moraine" | "wildflower" | "peak" | "boulder" | "gypsum" | "zest" | "luna" | "celeste" | "orion" | "ursa" | "astra" | "esther" | "estelle" | "andromeda") | string;
    /**
     * This is the model that will be used. Defaults to 'mistv2' when not specified.
     */
    type Model = "mist" | "mistv2" | "arcana";
    const Model: {
        readonly Mist: "mist";
        readonly Mistv2: "mistv2";
        readonly Arcana: "arcana";
    };
}
