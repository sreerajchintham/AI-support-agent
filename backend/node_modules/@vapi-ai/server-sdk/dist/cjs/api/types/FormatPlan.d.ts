/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Vapi from "../index.js";
export interface FormatPlan {
    /**
     * This determines whether the chunk is formatted before being sent to the voice provider. This helps with enunciation. This includes phone numbers, emails and addresses. Default `true`.
     *
     * Usage:
     * - To rely on the voice provider's formatting logic, set this to `false`.
     *
     * If `voice.chunkPlan.enabled` is `false`, this is automatically `false` since there's no chunk to format.
     *
     * @default true
     */
    enabled?: boolean;
    /**
     * This is the cutoff after which a number is converted to individual digits instead of being spoken as words.
     *
     * Example:
     * - If cutoff 2025, "12345" is converted to "1 2 3 4 5" while "1200" is converted to "twelve hundred".
     *
     * Usage:
     * - If your use case doesn't involve IDs like zip codes, set this to a high value.
     * - If your use case involves IDs that are shorter than 5 digits, set this to a lower value.
     *
     * @default 2025
     */
    numberToDigitsCutoff?: number;
    /**
     * These are the custom replacements you can make to the chunk before it is sent to the voice provider.
     *
     * Usage:
     * - To replace a specific word or phrase with a different word or phrase, use the `ExactReplacement` type. Eg. `{ type: 'exact', key: 'hello', value: 'hi' }`
     * - To replace a word or phrase that matches a pattern, use the `RegexReplacement` type. Eg. `{ type: 'regex', regex: '\\b[a-zA-Z]{5}\\b', value: 'hi' }`
     *
     * @default []
     */
    replacements?: FormatPlan.Replacements.Item[];
    /**
     * List of formatters to apply. If not provided, all default formatters will be applied.
     * If provided, only the specified formatters will be applied.
     * Note: Some essential formatters like angle bracket removal will always be applied.
     * @default undefined
     */
    formattersEnabled?: FormatPlan.FormattersEnabled.Item[];
}
export declare namespace FormatPlan {
    type Replacements = Replacements.Item[];
    namespace Replacements {
        type Item = Vapi.ExactReplacement | Vapi.RegexReplacement;
    }
    type FormattersEnabled = FormattersEnabled.Item[];
    namespace FormattersEnabled {
        type Item = "markdown" | "asterisk" | "quote" | "dash" | "newline" | "colon" | "acronym" | "dollarAmount" | "email" | "date" | "time" | "distance" | "unit" | "percentage" | "phoneNumber" | "number" | "stripAsterisk";
        const Item: {
            readonly Markdown: "markdown";
            readonly Asterisk: "asterisk";
            readonly Quote: "quote";
            readonly Dash: "dash";
            readonly Newline: "newline";
            readonly Colon: "colon";
            readonly Acronym: "acronym";
            readonly DollarAmount: "dollarAmount";
            readonly Email: "email";
            readonly Date: "date";
            readonly Time: "time";
            readonly Distance: "distance";
            readonly Unit: "unit";
            readonly Percentage: "percentage";
            readonly PhoneNumber: "phoneNumber";
            readonly Number: "number";
            readonly StripAsterisk: "stripAsterisk";
        };
    }
}
