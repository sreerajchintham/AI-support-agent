/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Vapi from "../index.js";
export interface XaiModel {
    /** This is the starting state for the conversation. */
    messages?: Vapi.OpenAiMessage[];
    /**
     * These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.
     *
     * Both `tools` and `toolIds` can be used together.
     */
    tools?: XaiModel.Tools.Item[];
    /**
     * These are the tools that the assistant can use during the call. To use transient tools, use `tools`.
     *
     * Both `tools` and `toolIds` can be used together.
     */
    toolIds?: string[];
    /** These are the options for the knowledge base. */
    knowledgeBase?: Vapi.CreateCustomKnowledgeBaseDto;
    /** This is the ID of the knowledge base the model will use. */
    knowledgeBaseId?: string;
    /** This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b */
    model: XaiModel.Model;
    provider: "xai";
    /** This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency. */
    temperature?: number;
    /** This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250. */
    maxTokens?: number;
    /**
     * This determines whether we detect user's emotion while they speak and send it as an additional info to model.
     *
     * Default `false` because the model is usually are good at understanding the user's emotion from text.
     *
     * @default false
     */
    emotionRecognitionEnabled?: boolean;
    /**
     * This sets how many turns at the start of the conversation to use a smaller, faster model from the same provider before switching to the primary model. Example, gpt-3.5-turbo if provider is openai.
     *
     * Default is 0.
     *
     * @default 0
     */
    numFastTurns?: number;
}
export declare namespace XaiModel {
    type Tools = Tools.Item[];
    namespace Tools {
        type Item = Vapi.CreateApiRequestToolDto | Vapi.CreateBashToolDto | Vapi.CreateComputerToolDto | Vapi.CreateDtmfToolDto | Vapi.CreateEndCallToolDto | Vapi.CreateFunctionToolDto | Vapi.CreateGoHighLevelCalendarAvailabilityToolDto | Vapi.CreateGoHighLevelCalendarEventCreateToolDto | Vapi.CreateGoHighLevelContactCreateToolDto | Vapi.CreateGoHighLevelContactGetToolDto | Vapi.CreateGoogleCalendarCheckAvailabilityToolDto | Vapi.CreateGoogleCalendarCreateEventToolDto | Vapi.CreateGoogleSheetsRowAppendToolDto | Vapi.CreateMcpToolDto | Vapi.CreateQueryToolDto | Vapi.CreateSlackSendMessageToolDto | Vapi.CreateSmsToolDto | Vapi.CreateTextEditorToolDto | Vapi.CreateTransferCallToolDto;
    }
    /**
     * This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b
     */
    type Model = "grok-beta" | "grok-2" | "grok-3";
    const Model: {
        readonly GrokBeta: "grok-beta";
        readonly Grok2: "grok-2";
        readonly Grok3: "grok-3";
    };
}
