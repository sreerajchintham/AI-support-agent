"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logs = void 0;
const environments = __importStar(require("../../../../environments.js"));
const core = __importStar(require("../../../../core/index.js"));
const headers_js_1 = require("../../../../core/headers.js");
const errors = __importStar(require("../../../../errors/index.js"));
class Logs {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * @param {Vapi.LogsGetRequest} request
     * @param {Logs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.logs.get()
     */
    get() {
        return __awaiter(this, arguments, void 0, function* (request = {}, requestOptions) {
            const list = core.HttpResponsePromise.interceptFunction((request) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c, _d, _e, _f;
                const { type: type_, webhookType, assistantId, phoneNumberId, customerId, squadId, callId, page, sortOrder, limit, createdAtGt, createdAtLt, createdAtGe, createdAtLe, updatedAtGt, updatedAtLt, updatedAtGe, updatedAtLe, } = request;
                const _queryParams = {};
                if (type_ !== undefined) {
                    _queryParams["type"] = type_;
                }
                if (webhookType !== undefined) {
                    _queryParams["webhookType"] = webhookType;
                }
                if (assistantId !== undefined) {
                    _queryParams["assistantId"] = assistantId;
                }
                if (phoneNumberId !== undefined) {
                    _queryParams["phoneNumberId"] = phoneNumberId;
                }
                if (customerId !== undefined) {
                    _queryParams["customerId"] = customerId;
                }
                if (squadId !== undefined) {
                    _queryParams["squadId"] = squadId;
                }
                if (callId !== undefined) {
                    _queryParams["callId"] = callId;
                }
                if (page !== undefined) {
                    _queryParams["page"] = (_a = page === null || page === void 0 ? void 0 : page.toString()) !== null && _a !== void 0 ? _a : null;
                }
                if (sortOrder !== undefined) {
                    _queryParams["sortOrder"] = sortOrder;
                }
                if (limit !== undefined) {
                    _queryParams["limit"] = (_b = limit === null || limit === void 0 ? void 0 : limit.toString()) !== null && _b !== void 0 ? _b : null;
                }
                if (createdAtGt !== undefined) {
                    _queryParams["createdAtGt"] = createdAtGt;
                }
                if (createdAtLt !== undefined) {
                    _queryParams["createdAtLt"] = createdAtLt;
                }
                if (createdAtGe !== undefined) {
                    _queryParams["createdAtGe"] = createdAtGe;
                }
                if (createdAtLe !== undefined) {
                    _queryParams["createdAtLe"] = createdAtLe;
                }
                if (updatedAtGt !== undefined) {
                    _queryParams["updatedAtGt"] = updatedAtGt;
                }
                if (updatedAtLt !== undefined) {
                    _queryParams["updatedAtLt"] = updatedAtLt;
                }
                if (updatedAtGe !== undefined) {
                    _queryParams["updatedAtGe"] = updatedAtGe;
                }
                if (updatedAtLe !== undefined) {
                    _queryParams["updatedAtLe"] = updatedAtLe;
                }
                const _response = yield ((_c = this._options.fetcher) !== null && _c !== void 0 ? _c : core.fetcher)({
                    url: core.url.join((_e = (_d = (yield core.Supplier.get(this._options.baseUrl))) !== null && _d !== void 0 ? _d : (yield core.Supplier.get(this._options.environment))) !== null && _e !== void 0 ? _e : environments.VapiEnvironment.Default, "logs"),
                    method: "GET",
                    headers: (0, headers_js_1.mergeHeaders)((_f = this._options) === null || _f === void 0 ? void 0 : _f.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({ Authorization: yield this._getAuthorizationHeader() }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                    queryParameters: _queryParams,
                    timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                    abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                });
                if (_response.ok) {
                    return { data: _response.body, rawResponse: _response.rawResponse };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.VapiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.VapiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.VapiTimeoutError("Timeout exceeded when calling GET /logs.");
                    case "unknown":
                        throw new errors.VapiError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            }));
            let _offset = (request === null || request === void 0 ? void 0 : request.page) != null ? request === null || request === void 0 ? void 0 : request.page : 1;
            const dataWithRawResponse = yield list(request).withRawResponse();
            return new core.Pageable({
                response: dataWithRawResponse.data,
                rawResponse: dataWithRawResponse.rawResponse,
                hasNextPage: (response) => { var _a; return ((_a = response === null || response === void 0 ? void 0 : response.results) !== null && _a !== void 0 ? _a : []).length > 0; },
                getItems: (response) => { var _a; return (_a = response === null || response === void 0 ? void 0 : response.results) !== null && _a !== void 0 ? _a : []; },
                loadPage: (_response) => {
                    _offset += 1;
                    return list(core.setObjectProperty(request, "page", _offset));
                },
            });
        });
    }
    /**
     * @param {Vapi.LoggingControllerLogsDeleteQueryRequest} request
     * @param {Logs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.logs.loggingControllerLogsDeleteQuery()
     */
    loggingControllerLogsDeleteQuery(request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__loggingControllerLogsDeleteQuery(request, requestOptions));
    }
    __loggingControllerLogsDeleteQuery() {
        return __awaiter(this, arguments, void 0, function* (request = {}, requestOptions) {
            var _a, _b, _c, _d;
            const { type: type_, assistantId, phoneNumberId, customerId, squadId, callId } = request;
            const _queryParams = {};
            if (type_ !== undefined) {
                _queryParams["type"] = type_;
            }
            if (assistantId !== undefined) {
                _queryParams["assistantId"] = assistantId;
            }
            if (phoneNumberId !== undefined) {
                _queryParams["phoneNumberId"] = phoneNumberId;
            }
            if (customerId !== undefined) {
                _queryParams["customerId"] = customerId;
            }
            if (squadId !== undefined) {
                _queryParams["squadId"] = squadId;
            }
            if (callId !== undefined) {
                _queryParams["callId"] = callId;
            }
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: core.url.join((_c = (_b = (yield core.Supplier.get(this._options.baseUrl))) !== null && _b !== void 0 ? _b : (yield core.Supplier.get(this._options.environment))) !== null && _c !== void 0 ? _c : environments.VapiEnvironment.Default, "logs"),
                method: "DELETE",
                headers: (0, headers_js_1.mergeHeaders)((_d = this._options) === null || _d === void 0 ? void 0 : _d.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({ Authorization: yield this._getAuthorizationHeader() }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: undefined, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VapiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.VapiTimeoutError("Timeout exceeded when calling DELETE /logs.");
                case "unknown":
                    throw new errors.VapiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            return `Bearer ${yield core.Supplier.get(this._options.token)}`;
        });
    }
}
exports.Logs = Logs;
