/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Vapi from "../../../index.js";
export declare namespace TestSuiteTests {
    interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class TestSuiteTests {
    protected readonly _options: TestSuiteTests.Options;
    constructor(_options: TestSuiteTests.Options);
    /**
     * @param {string} testSuiteId
     * @param {Vapi.TestSuiteTestControllerFindAllPaginatedRequest} request
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteTests.testSuiteTestControllerFindAllPaginated("testSuiteId")
     */
    testSuiteTestControllerFindAllPaginated(testSuiteId: string, request?: Vapi.TestSuiteTestControllerFindAllPaginatedRequest, requestOptions?: TestSuiteTests.RequestOptions): core.HttpResponsePromise<Vapi.TestSuiteTestsPaginatedResponse>;
    private __testSuiteTestControllerFindAllPaginated;
    /**
     * @param {string} testSuiteId
     * @param {Vapi.TestSuiteTestControllerCreateRequest} request
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteTests.testSuiteTestControllerCreate("testSuiteId", {
     *         scorers: [{
     *                 type: "ai",
     *                 rubric: "rubric"
     *             }],
     *         type: "voice",
     *         script: "script"
     *     })
     */
    testSuiteTestControllerCreate(testSuiteId: string, request: Vapi.TestSuiteTestControllerCreateRequest, requestOptions?: TestSuiteTests.RequestOptions): core.HttpResponsePromise<Vapi.TestSuiteTestControllerCreateResponse>;
    private __testSuiteTestControllerCreate;
    /**
     * @param {string} testSuiteId
     * @param {string} id
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteTests.testSuiteTestControllerFindOne("testSuiteId", "id")
     */
    testSuiteTestControllerFindOne(testSuiteId: string, id: string, requestOptions?: TestSuiteTests.RequestOptions): core.HttpResponsePromise<Vapi.TestSuiteTestControllerFindOneResponse>;
    private __testSuiteTestControllerFindOne;
    /**
     * @param {string} testSuiteId
     * @param {string} id
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteTests.testSuiteTestControllerRemove("testSuiteId", "id")
     */
    testSuiteTestControllerRemove(testSuiteId: string, id: string, requestOptions?: TestSuiteTests.RequestOptions): core.HttpResponsePromise<Vapi.TestSuiteTestControllerRemoveResponse>;
    private __testSuiteTestControllerRemove;
    /**
     * @param {string} testSuiteId
     * @param {string} id
     * @param {Vapi.TestSuiteTestControllerUpdateRequest} request
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteTests.testSuiteTestControllerUpdate("testSuiteId", "id", {
     *         type: "voice"
     *     })
     */
    testSuiteTestControllerUpdate(testSuiteId: string, id: string, request: Vapi.TestSuiteTestControllerUpdateRequest, requestOptions?: TestSuiteTests.RequestOptions): core.HttpResponsePromise<Vapi.TestSuiteTestControllerUpdateResponse>;
    private __testSuiteTestControllerUpdate;
    protected _getAuthorizationHeader(): Promise<string>;
}
